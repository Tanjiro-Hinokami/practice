# -*- coding: utf-8 -*-
"""Emotiserve_ChatGPT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wSWH-f4Xjr8lHFNYXWLaU580rlZCMlYF
"""

!pip install dash pandas plotly

import random
import pandas as pd
import dash
from dash import dcc, html  # Updated import statement
from dash.dependencies import Input, Output
import plotly.express as px
import threading
import time
from google.colab import output

def generate_emotion_data():
    locations = ["Entrance", "Checkout", "Clothing Area", "Electronics", "Food Court"]
    emotions = ["Happy", "Frustrated", "Neutral", "Confused", "Excited"]

    return {
        "timestamp": pd.Timestamp.now(),
        "location": random.choice(locations),
        "emotion": random.choice(emotions),
        "emotion_score": round(random.uniform(0, 1), 2)
    }

data_store = pd.DataFrame([generate_emotion_data() for _ in range(10)])

app = dash.Dash(__name__)

app.layout = html.Div([
    html.H1("EmotiServe - Real-Time Emotion Dashboard", style={'textAlign': 'center'}),

    dcc.Interval(id='interval-component', interval=5000, n_intervals=0),

    dcc.Dropdown(
        id='location-filter',
        options=[{'label': loc, 'value': loc} for loc in data_store['location'].unique()],
        multi=True,
        placeholder="Filter by location"
    ),

    html.Div([
        html.Div([dcc.Graph(id='emotion-distribution')], style={'width': '50%', 'display': 'inline-block'}),
        html.Div([dcc.Graph(id='time-series-trend')], style={'width': '50%', 'display': 'inline-block'})
    ]),

    html.Div([dcc.Graph(id='emotion-heatmap')]),

    html.Div(id='alert-section', style={'color': 'red', 'fontWeight': 'bold', 'textAlign': 'center'})
])

@app.callback(
    [
        Output('emotion-distribution', 'figure'),
        Output('time-series-trend', 'figure'),
        Output('emotion-heatmap', 'figure'),
        Output('alert-section', 'children')
    ],
    [Input('interval-component', 'n_intervals'),
     Input('location-filter', 'value')]
)
def update_dashboard(n, selected_locations):
    global data_store
    new_data = generate_emotion_data()
    data_store = pd.concat([data_store, pd.DataFrame([new_data])], ignore_index=True)

    if selected_locations:
        filtered_data = data_store[data_store['location'].isin(selected_locations)]
    else:
        filtered_data = data_store

    # Emotion distribution chart
    dist_fig = px.bar(filtered_data, x='emotion', title='Emotion Distribution', color='emotion')

    # Time-series trend
    trend_data = filtered_data.groupby('timestamp')['emotion_score'].mean().reset_index()
    trend_fig = px.line(trend_data, x='timestamp', y='emotion_score', title='Emotion Score Trend')

    # Heatmap (Grid representation for simplicity)
    heatmap_data = filtered_data.groupby('location')['emotion_score'].mean().reset_index()
    heatmap_fig = px.scatter(heatmap_data, x='location', y='emotion_score', size='emotion_score', color='emotion_score',
                             title='Location-Based Emotion Heatmap', color_continuous_scale='RdYlGn')

    # Alert Section
    alerts = heatmap_data[heatmap_data['emotion_score'] < 0.3]
    alert_text = "Warning! Low emotion scores detected at: " + ", ".join(alerts['location'].tolist()) if not alerts.empty else ""

    return dist_fig, trend_fig, heatmap_fig, alert_text

threading.Thread(target=app.run, kwargs={'debug': False, 'use_reloader': False}).start()
output.serve_kernel_port_as_iframe(8050)

